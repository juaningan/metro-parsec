#!/sbin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright 2012, Joyent, Inc. All rights reserved.
#
. /lib/svc/share/smf_include.sh

diskdir=/.disk
hostname=$(uname -n)

check_online () {
  echo "INFO: Comprobando conectividad (10s)" > /dev/msglog
  ping 16.0.96.20 10
}

update_app () {
  if ! diff /metadata.json ${diskdir}/metadata.json; then
    echo "INFO: Actualizando version de boot_archive" > /dev/msglog
    /usr/bin/wget -q "http://16.0.96.20/repo/pctce/boot_archive" -O ${diskdir}/platform/i86pc/boot_archive
    cp /metadata.json ${diskdir}/metadata.json
  fi
  echo "INFO: Descargando aplicacion" > /dev/msglog
  /usr/bin/wget -q "http://16.0.96.20/repo/pctce/pctce-app.tar.gz" -O ${diskdir}/pctce-app.tar.gz
  echo "INFO: Descargando configuracion" > /dev/msglog
  /usr/bin/wget -q "http://16.0.96.20/repo/tce-estacion/${hostname}/${hostname}.tar.gz" -O ${diskdir}/pctce-config.tar.gz
}

check_app () {
  echo "INFO: Comprobando ficheros aplicacion" > /dev/msglog
  if [[ ! -f ${diskdir}/pctce-config.tar.gz ]]; then
    echo "ERROR: No hay configuracion en el disco y tampoco se puede obtener por red" > /dev/msglog
    exit $SMF_EXIT_ERR_FATAL
  fi
}

deploy_app () {
  echo "INFO: Extrayendo aplicacion" > /dev/msglog
  (cd /; gunzip < ${diskdir}/pctce-app.tar.gz | tar -xvf -)
  echo "INFO: Extrayendo configuracion" > /dev/msglog
  (cd /; gunzip < ${diskdir}/pctce-config.tar.gz | tar -xvf -)
  ln -sf /home/metro/hosts /etc/inet/hosts
  ln -sf /home/metro/services /etc/inet/services
}

detect_id () {
  pctce_id=$(sed -n '3p' /home/metro/sistema/V/CfgConfig.CFG | awk '{ printf("%02d", $1)} { printf("%02d", $2)} { printf("%01d", $3)}')
  if [[ ! $pctce_id ]]; then
    echo "ERROR: No se puede determinar codigo administrativo del equipo" > /dev/msglog
    exit $SMF_EXIT_ERR_FATAL
  else
    echo "INFO: Codigo administrativo (id): ${pctce_id}" > /dev/msglog
  fi
}

detect_uis () {
  uis_count=$(/usr/bin/awk '/UIS/ {print $1}' /etc/hosts | wc -l)
  if [[ $uis_count -ne '1' ]]; then
    echo "ERROR: No se puede determinar IP de la UIS por haber ${uis_count} coincidencias en /etc/hosts" > /dev/msglog
    exit $SMF_EXIT_ERR_FATAL
  else
    uis_ip=$(/usr/bin/awk '/UIS/ {print $1}' /etc/hosts)
    echo "INFO: IP de la UIS: ${uis_ip}" > /dev/msglog
  fi
}

detect_cancela () {
  cancela_port=$(/usr/bin/awk '/CANCELA/ {print $3}' /home/metro/sistema/V/CfgEquipo.CFG | /usr/bin/sed 's/^0*//')
  if [[ ! $cancela_port ]]; then
    echo "WARN: Sin cancela definida en CfgEquipo.CFG" > /dev/msglog
    cancela="false"
    rm -f /home/metro/sun/cancela_schneider
    rm -f /home/metro/sun/cancela_mayser
    return
  elif [[ $cancela_port -le 16 ]]; then
    echo "INFO: Cancela por UIS (binario: cancela_mayser)" > /dev/msglog
    cancela="uis"
    ln -sf cancela_mayser /home/metro/sun/cancela
    rm -f /home/metro/sun/cancela_schneider
  else
    echo "INFO: Cancela por Maestra (binario: cancela_schneider)" > /dev/msglog
    cancela="maestra"
    ln -sf cancela_schneider /home/metro/sun/cancela
    rm -f /home/metro/sun/cancela_mayser
  fi
}

detect_mbt () {
  concen_mbt_ip=$(/usr/bin/awk '/concen-mbt-ppp$/ {print $1}' /etc/hosts)
  mbt_ip=$(/usr/bin/awk '/mbt$/ {print $1}' /etc/hosts)
  if [[ -z $mbt_ip ]]; then
    echo "INFO: Sin MBT" > /dev/msglog
    mbt_id=false
    return 1
  else
    echo "INFO: IP de la MBT: ${mbt_ip}" > /dev/msglog
    mbt_id=$(find /home/metro/sistema/V/Mbt/ -name MBT* | awk -F"/" '{print $NF; exit}')
    if [[ -z $mbt_id ]]; then
      echo "ERROR: No puedo obtener ID de la MBT en /home/metro/sistema/V/Mbt/" > /dev/msglog
      exit $SMF_EXIT_ERR_FATAL
    else
      echo "INFO: ID de la MBT: ${mbt_id}" > /dev/msglog
      return 0
    fi
  fi
}

detect_plano () {
  plano=$(grep -v FIN /home/metro/sistema/V/CfgUI.CFG)
  if grep UI /home/metro/sistema/V/CfgUI.CFG; then
    echo "INFO: Con plano" > /dev/msglog
    plano=true
  else
    echo "INFO: Sin plano" > /dev/msglog
    plano=false
    return 1
  fi
}

detect_tcti () {
  tcti_hostname=$(/usr/bin/awk '/tcti/ {print $4}' /home/metro/sistema/V/CfgConfig.CFG)
  if [[ -z $tcti_hostname ]]; then
    echo "INFO: Sin TCTI" > /dev/msglog
    tcti="false"
    mv /home/metro/sun/router-tcti_nuevo /home/metro/sun/router
    return 1
  elif $(/home/metro/sun/socat -T 1 - TCP4:${tcti_hostname}:23); then
    echo "INFO: TCTI antiguo"
    tcti="antiguo"
    ln -sf router-tcti_antiguo /home/metro/sun/router
    rm -f /home/metro/sun/router-tcti_nuevo
    return 0
  else
    echo "INFO: TCTI nuevo"
    tcti="nuevo"
    ln -sf router-tcti_nuevo /home/metro/sun/router
    rm -f /home/metro/sun/router-tcti_antiguo
    return 0
  fi
}

write_mbt () {
  cat > /tmp/mbt-ppp << EOF
noauth
xonxoff
local
lock
mru 256
netmask 255.255.255.0
${concen_mbt_ip}:${mbt_ip}
nodefaultroute
-ac
-pc
-vj
debug
lcp-echo-interval 30
lcp-echo-failure 2
lcp-restart 3
lcp-max-configure 100
lcp-max-failure 10
noaccomp
nobsdcomp
noccp
nodeflate
nopcomp
nopersist
novj
novjccomp
logfile /tmp/ppp-mbt.log
EOF
}

write_env () {
  cat > /home/metro/environment << EOF
ID=${pctce_id}
PCTCE_ID=${pctce_id}
UIS_IP=${uis_ip}
CANCELA=${cancela}
TCTI=${tcti}
MAESTRA_IP=true
PLANO=${plano}
MBT_ID=${mbt_id}
EOF
}

write_cron () {
  cat > /var/spool/cron/crontabs/metro << EOF
0,15,30,45 2-5 * * * /home/metro/sun/MandaVolcados.ksh
10 2 * * * /home/metro/sun/CapturarFicherosRepositorio.sh
13,28,43,58 2-5 * * * /home/metro/sun/SubirDatosRepositorio.csh
18,33 2 * * * /home/metro/sun/SubirDatosRepositorioPupitre.csh
0 * * * * /home/metro/sun/MandaAbajo.ksh
EOF
  if [[ $mbt_id != 'false' ]]; then
    echo "50 4 * * * /home/metro/sun/mbt.csh ${mbt_id} mbt >> /home/metro/sistema/V/Mbt/xEventosMbt" >> /var/spool/cron/crontabs/metro
  fi
  /usr/bin/chown root:sys /var/spool/cron/crontabs/metro
  /usr/bin/chmod 0600 /var/spool/cron/crontabs/metro
  svcadm restart system/cron
}

main () {
  if check_online; then
    update_app
  fi
  check_app
  deploy_app
  detect_id
  detect_uis
  detect_cancela
  detect_tcti
  if detect_mbt; then
    write_mbt
  fi
  write_env
  write_cron

  svccfg -s network/rpc/bind setprop config/local_only=false
  svcadm refresh network/rpc/bind:default

  svccfg -s application/pctce/actualiza-listas setenv PCTCE_ID ${pctce_id}
  svcadm refresh application/pctce/actualiza-listas:default

  wget "http://16.0.96.20/repo/pctce/ventilacion/salida/${hostname}" -O /home/metro/sistema/V/CtrlPcl/PCL${pctce_id}/Programaciones/Ventilacion/ProgVentilacion

  /usr/bin/chown -R metro:metro /home/metro
}

main

exit $SMF_EXIT_OK
