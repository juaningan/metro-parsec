#!/bin/bash
#
# Use VMware's open-vmdk tools to create an OVA image
# This is a little hacky, but qemu and even virtualbox cannot
# produce a proper vmware-portable OVA. 
#
error() { echo "$@" 1>&2; }
debug() { error "$(date -R):" "$@"; }
cleanup() {
    [ -z "${TEMP_D}" -o ! -d "${TEMP_D}" ] || rm -Rf "${TEMP_D}"
}
fail() { [ $# -eq 0 ] || error "$@"; exit 1; }
Usage() {
    cat <<EOF
Usage: ${0##*/} partition-image output-dir
   build ovf from partition-image into output-dir
 options:
    --template TEMPLATE  use template TEMPLATE for creating .ovf
    --prefix   PREFIX    name files in output-dir prefixed with PREFIX
    --size     SIZE      make the disk image size SIZE
    --disk     DISK      use partitioned image DISK
    --out      OUT       use directory for output
EOF
}
bad_Usage() { Usage 1>&2; fail "$@"; }

# fullpath(file)
fp() {
    case "$1" in
        /*) _RET=${1};;
        *) _RET="${2:-${PWD}}/${1}";;
    esac
    return 0
}

short_opts="h"
long_opts="help,config:,prefix:,size:,template:,disk:,out:,version:"
getopt_out=$(getopt --name "${0##*/}" \
    --options "${short_opts}" --long "${long_opts}" -- "$@") &&
    eval set -- "${getopt_out}" ||
    bad_Usage

# Set some pathing
my_dir="$(readlink -f $(dirname ${0}))"
conf=""
tmpl="${my_dir}/conf/ubuntu-ova-v1-vmdk.tmpl"
pref="sample"
size="10"

while [ $# -ne 0 ]; do
    cur=${1}; next=${2};
    case "$cur" in
        -h|--help) Usage; exit 0;;
           --config)     conf=${next}; shift;;
           --template)   tmpl=${next}; shift;;
           --prefix)     prefix=${next}; shift;;
           --size)       size=${next}; shift;;
           --disk)       disk=${next}; shift;;
           --out)        out_d=${next}; shift;;
           --version)    version=${next}; shift;;
        --) shift; break;;
    esac
    shift;
done

[ ! -f "${tmpl}" ] && fail "did not find ${tmpl}"

trap cleanup EXIT
TEMP_D=$(mktemp -d)
cd ${TEMP_D}

debug "Working in ${TEMP_D}"
name="${prefix}"
vmdk_base_f="${name}-disk1.vmdk"
vmdk_f="${TEMP_D}/${vmdk_base_f}"
work_disk_f="${TEMP_D}/${name}.raw"
final_ova="${out_d}/${name}.ova"

# Converting the disk to the write format
debug "converting ${work_disk_f} to"
debug "           ${vmdk_f}"
debug "    please be patient...this takes a bit"

# Resize the disk
debug "creating transitional copy"
cp -au "${disk}" "${vmdk_f}.raw" ||
    fail "failed to create transitional image"

debug "resizing disk"
qemu-img resize \
    "${vmdk_f}.raw" "${size}G" ||
    fail "failed to rewize transitional disk"

debug "converting disk to vmdk...this will take a while"
python2.7 ${my_dir}/VMDKstream.py \
    "${vmdk_f}.raw" "${vmdk_f}" ||
    fail "failed to convert disk to VMDK"

# Get the information that we need out of it
debug "getting file size information"
vmdk_size=$(du -b "${vmdk_f}" | cut -f1) ||
    fail "failed to get vmdk_size for ${vmdk_f}"
vmdk_capacity=$(qemu-img info "${vmdk_f}" \
        | awk '-F[( ]' '$1 ~ /virtual/ && $NF ~ /bytes)/ {print$(NF-1)}') ||
    fail "failed to get vmdk capacity for ${vmdk_f}"

debug "generating sha1 for ${vmdk_f}"
vmdk_sha1=$(sha1sum ${vmdk_f} | cut -d' ' -f1) ||
    fail "failed to get vmdk SHA1"

ovf="${TEMP_D}/${prefix}.ovf"
cp "${tmpl}" "${ovf}" ||
    fail "failed placement of OVF to ${ovf}"

serial_stamp=$(date +%Y%m%d)
sed -i "${ovf}" \
    -e "s/@@NAME@@/$name/g" \
    -e "s/@@VMDK_FILE_SIZE@@/$vmdk_size/g" \
    -e "s/@@VMDK_CAPACITY@@/$vmdk_capacity/g" \
    -e "s/@@NUM_CPUS@@/2/g" \
    -e "s/@@VERSION@@/$version/g" \
    -e "s/@@DATE@@/$serial_stamp/g" \
    -e "s/@@MEM_SIZE@@/1024/g" ||
        fail "failed to populate OVF values"

debug "generating sha1 for ${TEMP_D}/${prefix}.ovf"
ovf_sha1=$(sha1sum ${ovf} | cut -d' ' -f1) ||
    fail "failed to get ${ovf} SHA1"

manifest="${TEMP_D}/${prefix}.mf"
cat > "${manifest}" <<EOF
SHA1(${vmdk_base_f})= ${vmdk_sha1}
SHA1(${prefix}.ovf)= ${ovf_sha1}
EOF

debug "OVA information:"
cat <<EOM
OVA information:
    Name:       ${name}
    Size:       ${vmdk_size}
    Capacity:   ${vmdk_capacity}
    VMDK Name:  ${vmdk_f}
    VMDK SHA1:  ${vmdk_sha1}
    OVF NAME:   ${ovf}
    OVF SHA1:   ${ovf_sha1}
    File Name:  ${final_ova}
EOM

debug "packing OVA to ${final_ova}"
tar -C ${TEMP_D} \
    -cf ${final_ova} \
    ${prefix}.ovf \
    ${prefix}.mf \
    $(basename ${vmdk_f}) ||
        fail "failed to create the OVA image"

debug "OVA members are:"
tar -tf ${final_ova}

debug "wrote ${final_ova} to ${out_d}"

# vi: ts=4 noexpandtab
